{"version":3,"sources":["Validations/validasiTransaksiPenjualan.js","Transaksi/Component/FormTranskasiPenjualan.jsx"],"names":["validasiTransaksiPenjualan","value","errors","kodeBarang","pkg","p","k","bruto","discGlobalPr","currencyMask","createNumberMask","prefix","suffix","locale","FormTransaksiPenjualan","props","state","this","dispatch","getListBarang","change","netto","noFaktur","gross","discGlobalGr","toFixed","data","result_explode","split","setState","kodeJenis","namaJenis","kadarCetak","kadarJual","localStorage","getItem","onSubmit","handleSubmit","className","Field","name","label","type","readOnly","component","renderField","defaultValue","normalize","toUpperCase","renderFieldSelect","onChange","pilihBarang","onBlur","setKadar","options","KodeBarangList","map","kode","kode_jenis","nama_jenis","kadar_cetak","kadar_jual","kadar_beli","width","height","onclick1","htmlFor","Component","reduxForm","form","enableReinitialize","validate","selector","formValueSelector","connect","kadarTransaksi","parseFloat","provinsi"],"mappings":"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","file":"static/js/27.a023bcdf.chunk.js","sourcesContent":["const validasiTransaksiPenjualan = (value) => {\r\n  const errors = {};\r\n  if (!value.kodeBarang) {\r\n    errors.kodeBarang = \"Tidak Boleh kosong, silahkan isi\";\r\n  }\r\n  if (!value.pkg) {\r\n    errors.pkg = \"Tidak Boleh kosong, silahkan isi\";\r\n  }\r\n  if (!value.p) {\r\n    errors.p = \"Tidak Boleh kosong, silahkan isi\";\r\n  }\r\n  if (!value.k) {\r\n    errors.k = \"Tidak Boleh kosong, silahkan isi\";\r\n  }\r\n  if (!value.bruto) {\r\n    errors.bruto = \"Tidak Boleh kosong, silahkan isi\";\r\n  }\r\n  if (!value.discGlobalPr) {\r\n    errors.discGlobalPr = \"Tidak Boleh kosong, silahkan isi\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default validasiTransaksiPenjualan;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm, formValueSelector } from \"redux-form\";\r\nimport { createNumberMask } from \"redux-form-input-masks\";\r\nimport validasiTransaksiPenjualan from \"../../Validations/validasiTransaksiPenjualan\";\r\nimport { renderField, renderFieldSelect } from \"../../renderField\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport { getListBarang } from \"../../actions/kodeBarangAction\";\r\n\r\nconst currencyMask = createNumberMask({\r\n  prefix: \"Rp. \",\r\n  suffix: \",-\",\r\n  locale: \"id-ID\",\r\n});\r\n\r\nclass FormTransaksiPenjualan extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      kodeBarang: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.dispatch(getListBarang());\r\n    // getTimbangan(this.props.change);\r\n  }\r\n\r\n  onclick1() {\r\n    this.props.change(\"netto\", this.props.netto);\r\n    this.props.change(\"noFaktur\", this.props.noFaktur);\r\n    this.props.change(\"gross\", this.props.gross);\r\n    this.props.change(\"discGlobalGr\", this.props.discGlobalGr);\r\n    this.props.change(\r\n      \"nettoDiscGlobalExt\",\r\n      (this.props.netto - this.props.discGlobalGr).toFixed(3)\r\n    );\r\n  }\r\n\r\n  pilihBarang(data) {\r\n    var supp = data ? data : \"DEFAULT | DEFAULT | DEFAULT | DEFAULT \";\r\n    var result_explode = supp.split(\"|\");\r\n    this.setState({\r\n      kodeJenis: result_explode[0],\r\n      namaJenis: result_explode[1],\r\n      kadarCetak: result_explode[2],\r\n      kadarJual: result_explode[3],\r\n    });\r\n  }\r\n\r\n  setKadar() {\r\n    this.props.change(\"keterangan\", this.state.namaJenis);\r\n    this.props.change(\"kadar\", this.state.kadarCetak);\r\n    this.props.change(\"kadarTransaksi\", this.state.kadarJual);\r\n  }\r\n\r\n  setBruto() {\r\n    this.props.change(\"bruto\", localStorage.getItem(\"Timbangan\"));\r\n  }\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.props.handleSubmit}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 col-lg-12 d-none\">\r\n            <Field\r\n              name=\"noFaktur\"\r\n              label={this.props.noFaktur}\r\n              type=\"text\"\r\n              readOnly={true}\r\n              component={renderField}\r\n              defaultValue={this.props.noFaktur}\r\n              normalize={(value) => value && value.toUpperCase()}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 col-lg-4\">\r\n            {this.state.kodeBarang ? (\r\n              <Field\r\n                name=\"kodeBarang\"\r\n                label=\"Kode Barang\"\r\n                component={renderFieldSelect}\r\n                className=\"form-control\"\r\n                onChange={(data) => this.pilihBarang(data)}\r\n                onBlur={this.setKadar()}\r\n                options={this.props.KodeBarangList.map((kode) => {\r\n                  let data = {\r\n                    value:\r\n                      kode.kode_jenis +\r\n                      \"|\" +\r\n                      kode.nama_jenis +\r\n                      \"|\" +\r\n                      kode.kadar_cetak +\r\n                      \"|\" +\r\n                      kode.kadar_jual +\r\n                      \"|\" +\r\n                      kode.kadar_beli,\r\n                    name: kode.nama_jenis,\r\n                  };\r\n                  return data;\r\n                })}\r\n              />\r\n            ) : (\r\n              <Skeleton width={\"100%\"} height={50} />\r\n            )}\r\n          </div>\r\n          <div className=\"col-md-8 col-lg-8\">\r\n            <Field\r\n              name=\"keterangan\"\r\n              label=\"Keterangan\"\r\n              type=\"text\"\r\n              component={renderField}\r\n              normalize={(value) => value && value.toUpperCase()}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field\r\n              name=\"kadar\"\r\n              label=\"Kadar (%)\"\r\n              type=\"number\"\r\n              component={renderField}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field name=\"p\" label=\"P\" type=\"number\" component={renderField} />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field name=\"k\" label=\"K\" type=\"number\" component={renderField} />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field\r\n              name=\"pkg\"\r\n              label=\"Pkg (Gr)\"\r\n              type=\"number\"\r\n              component={renderField}\r\n              onBlur={() => this.onclick1()}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field\r\n              name=\"bruto\"\r\n              label=\"Berat (Gr)\"\r\n              type=\"number\"\r\n              component={renderField}\r\n              onChange={this.onclick1()}\r\n              // onChange={this.setBruto()}\r\n              // onBlur={this.setBruto()}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field\r\n              name=\"kadarTransaksi\"\r\n              label=\"Harga (%)\"\r\n              type=\"number\"\r\n              component={renderField}\r\n              onBlur={() => this.onclick1()}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field\r\n              name=\"netto\"\r\n              label=\"Netto (Gr)\"\r\n              type=\"number\"\r\n              component={renderField}\r\n              readOnly={true}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field\r\n              name=\"gross\"\r\n              label=\"Gross (Gr)\"\r\n              type=\"number\"\r\n              component={renderField}\r\n              readOnly={true}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field\r\n              name=\"discGlobalPr\"\r\n              label=\"Diskon (%)\"\r\n              type=\"number\"\r\n              component={renderField}\r\n              onBlur={() => this.onclick1()}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field\r\n              name=\"discGlobalGr\"\r\n              label=\"Diskon (Gr)\"\r\n              type=\"number\"\r\n              component={renderField}\r\n              readOnly={true}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <Field\r\n              name=\"nettoDiscGlobalExt\"\r\n              label=\"Netto - Diskon (Gr)\"\r\n              type=\"number\"\r\n              component={renderField}\r\n              readOnly={true}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-lg-3\">\r\n            <label htmlFor=\"\">Ongkos (Rp)</label>\r\n            <Field\r\n              name=\"rp\"\r\n              component=\"input\"\r\n              type=\"tel\"\r\n              className=\"form-control\"\r\n              {...currencyMask}\r\n            />\r\n          </div>\r\n          <div className=\"col-lg-12 col-md-12\">\r\n            <div className=\"text-right\">\r\n              <button className=\"btn btn-primary\" type=\"submit\">\r\n                Simpan\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nFormTransaksiPenjualan = reduxForm({\r\n  form: \"FormTransaksiPenjualan\",\r\n  enableReinitialize: true,\r\n  validate: validasiTransaksiPenjualan,\r\n})(FormTransaksiPenjualan);\r\nconst selector = formValueSelector(\"FormTransaksiPenjualan\"); // <-- same as form name\r\nexport default connect((state) => {\r\n  const { bruto, kadarTransaksi, pkg, discGlobalPr } = selector(\r\n    state,\r\n    \"bruto\",\r\n    \"kadarTransaksi\",\r\n    \"pkg\",\r\n    \"discGlobalPr\"\r\n  );\r\n  return {\r\n    netto: (parseFloat(bruto) * (parseFloat(kadarTransaksi) / 100)).toFixed(3),\r\n    gross: parseFloat(bruto) + parseFloat(pkg),\r\n    discGlobalGr: (\r\n      parseFloat(bruto) *\r\n      (parseFloat(discGlobalPr) / 100)\r\n    ).toFixed(3),\r\n    KodeBarangList: state.provinsi.kodeBarang,\r\n  };\r\n})(FormTransaksiPenjualan);\r\n"],"sourceRoot":""}